<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 相关配置</title>
    <url>/2022/01/07/Git%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="git的基本操作"><a href="#git的基本操作" class="headerlink" title="git的基本操作"></a>git的基本操作</h2><h3 id="git-建立存储库的三种方式"><a href="#git-建立存储库的三种方式" class="headerlink" title="git 建立存储库的三种方式"></a>git 建立存储库的三种方式</h3><ul>
<li><p>初始化存储库 <code>git init</code></p>
</li>
<li><p>克隆远程仓库 <code>git clone [REPOSITORY_URI]</code></p>
</li>
<li><p>建立本地存储库 <code>git init --bare</code></p>
<blockquote>
<p>这个资料夹不能直接拿来做开发用途，只能用来储存 Git 的相关资讯。</p>
<p>由于这是一个“没有工作目录的纯储存库”，所以共用储存库也有个别名叫做“裸储存库”</p>
</blockquote>
</li>
</ul>
<h3 id="git-指令与参数（增删改查）"><a href="#git-指令与参数（增删改查）" class="headerlink" title="git 指令与参数（增删改查）"></a>git 指令与参数（增删改查）</h3><ul>
<li><p>显示工作目录和暂存区的状态  <code>git status</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status -s #显示较为精简的版本。</span><br></pre></td></tr></table></figure></li>
<li><p>重置工作目录状态、一般用于撤销之前的操作 <code>git reset</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard #还原到目前的最新版</span><br></pre></td></tr></table></figure></li>
<li><p>显示提交日志信息 <code>git log</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log -10 #限定输出最近几条纪录</span><br></pre></td></tr></table></figure></li>
<li><p>将修改添加到暂存区 <code>git add</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2] ... # 添加指定文件到暂存区</span><br><span class="line">git add [dir] # 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add . # 添加当前目录的所有文件到暂存区</span><br></pre></td></tr></table></figure></li>
<li><p>将更改记录(提交)到存储库 <code>git commit</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;版本纪录的说明文字&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>从工作区和索引中删除文件 <code>git rm </code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm &#x27;file.js&#x27; # 删除 file.js</span><br></pre></td></tr></table></figure></li>
<li><p>移动或重命名文件 <code>git mv </code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git mv test unit-test # 把 `test` 目录更名为 `unit-test`</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用 <code>git rm</code> 删除的目录或档案，还是用 <code>git mv</code> 更名的目录或档案，通过 <code>git reset</code> 都无法还原回来</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="git提交"><a href="#git提交" class="headerlink" title="git提交"></a>git提交</h3><h2 id="git-开启区分大小写后-删除重复的文件"><a href="#git-开启区分大小写后-删除重复的文件" class="headerlink" title="git 开启区分大小写后, 删除重复的文件"></a>git 开启区分大小写后, 删除重复的文件</h2><ol>
<li>让git区分大小写: <code>git config core.ignorecase false</code></li>
<li>删除缓存: <code>git rm -r --cached .</code></li>
<li>添加当前目录的所有文件: <code>git add .</code></li>
<li>写注释: <code>git commit -m &#39;fix: 修复git大小写不敏感造成的文件未上传&#39;</code></li>
<li>提交: <code>git push</code></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2021/12/06/JavaScript%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="JavaScript基本数据类型"><a href="#JavaScript基本数据类型" class="headerlink" title="JavaScript基本数据类型"></a>JavaScript基本数据类型</h2><p><img src="https://s4.ax1x.com/2022/01/24/7IjDWq.png"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MOCK 方案对比</title>
    <url>/2021/09/09/MOCK%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h1 id="常见的-MOCK-方案"><a href="#常见的-MOCK-方案" class="headerlink" title="常见的 MOCK 方案"></a>常见的 MOCK 方案</h1><h3 id="1-代码侵入-直接在代码中写死-Mock-数据，或者请求本地的-JSON-文件"><a href="#1-代码侵入-直接在代码中写死-Mock-数据，或者请求本地的-JSON-文件" class="headerlink" title="1.代码侵入 (直接在代码中写死 Mock 数据，或者请求本地的 JSON 文件)"></a>1.代码侵入 (直接在代码中写死 Mock 数据，或者请求本地的 JSON 文件)</h3><p><strong>优点：</strong> 无</p>
<p><strong>缺点：</strong></p>
<ol>
<li>和其他方案比 Mock 效果不好。</li>
<li>与真实 Server 环境的切换非常麻烦，一切需要侵入代码切换环境的行为都是不好的。<span id="more"></span>
<h3 id="2-请求拦截"><a href="#2-请求拦截" class="headerlink" title="2.请求拦截"></a>2.请求拦截</h3></li>
</ol>
<p>代表：<a href="http://mockjs.com/">Mock.js</a></p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Mock.mock(<span class="regexp">/\\/</span>api\\/visitor\\/list/, <span class="string">&#x27;get&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data|10&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;@csentence(5)&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;@integer(6, 9)-@integer(10, 14)岁 @cword(&quot;零有&quot;, 1)基础&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;lesson_image&#x27;</span>: <span class="string">&quot;&lt;https://images.pexels.com/3737094/pexels-photo-3737094.jpeg&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;lesson_package&#x27;</span>: <span class="string">&#x27;L1基础指令课&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;done&#x27;</span>: <span class="string">&#x27;@integer(10000, 99999)&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ol>
<li>与前端代码分离</li>
<li>可生成随机数据</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li><p>数据都是动态生成的假数据，无法真实模拟增删改查的情况。</p>
</li>
<li><p>只支持 ajax，不支持 fetch。</p>
<p><a href="https://zhuanlan.zhihu.com/p/24594294">ajax 和 fetch 区别</a></p>
</li>
</ol>
<h3 id="3-接口管理工具"><a href="#3-接口管理工具" class="headerlink" title="3.接口管理工具"></a>3.接口管理工具</h3><p><strong>代表：</strong> <a href="https://github.com/thx/RAP">rap</a>、<a href="https://swagger.io/">swagger</a>、<a href="https://github.com/dreamhead/moco">moco</a>、<a href="https://github.com/YMFE/yapi">yapi</a></p>
<p><strong>优点：</strong></p>
<ol>
<li>配置功能强大，接口管理与 Mock 一体，后端修改接口 Mock 也跟着更改，可靠。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>配置复杂，依赖后端，可能会出现后端不愿意出手，或者等配置完了，接口也开发出来了的情况。</li>
<li>一般会作为大团队的基础建设而存在</li>
</ol>
<h3 id="4-本地-Node-服务器"><a href="#4-本地-Node-服务器" class="headerlink" title="4.本地 Node 服务器"></a>4.本地 Node 服务器</h3><p><strong>代表：</strong><a href="https://github.com/typicode/json-server">json-server</a></p>
<p><strong>优点：</strong></p>
<ol>
<li>配置简单，json-server 甚至可以 0 代码 30 秒启动一个 REST API Server。</li>
<li>自定义程度高，一切尽在掌控中。</li>
<li>增删改查真实模拟。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>与接口管理工具相比，无法随着后端 API 的修改而自动修改。</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Mock</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 相关配置</title>
    <url>/2021/09/10/hexo%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="Hexo-的基本操作"><a href="#Hexo-的基本操作" class="headerlink" title="Hexo 的基本操作"></a>Hexo 的基本操作</h2><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><blockquote>
<p>hexo init 文件夹名称</p>
</blockquote>
<h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><blockquote>
<p>hexo new 文章名称</p>
</blockquote>
<h3 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h3><blockquote>
<p>hexo server &amp; hexo s</p>
</blockquote>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><blockquote>
<p>hexo generate &amp; hexo g &amp; hexo g –watch</p>
</blockquote>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote>
<p>hexo deploy &amp; hexo d &amp; hexo generate –deploy</p>
</blockquote>
<h2 id="butterfly-美化"><a href="#butterfly-美化" class="headerlink" title="butterfly 美化"></a>butterfly 美化</h2><h3 id="如何引入自定义的-CSS-JS-文件"><a href="#如何引入自定义的-CSS-JS-文件" class="headerlink" title="如何引入自定义的 CSS/JS 文件"></a>如何引入自定义的 CSS/JS 文件</h3><p>通过主题配置 <code>inject</code> 可以引入外部的自定义 CSS 文件和 JS 文件。例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;http://localhost:3000/css/index.min.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;http://localhost:3000/css/index.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h3><ul>
<li>编辑 <code>themes\butterfly\_config.yml</code> 文件、找到 <code>background</code> 修改里面的内容</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">&#x27;linear-gradient(0deg,rgba(247,149,51,0.1) 0,rgba(243,112,85,0.1) 15%,rgba(239,78,123,0.1) 30%,rgba(161,102,171,0.1) 44%,rgba(80,115,184,0.1) 58%,rgba(16,152,173,0.1) 72%,rgba(7,179,155,0.1) 86%,rgba(109,186,130,0.1) 100%);&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置主页背景高度"><a href="#设置主页背景高度" class="headerlink" title="设置主页背景高度"></a>设置主页背景高度</h3><ul>
<li>编辑 <code>_themes\butterfly\_config.yml</code> 文件、修改 <code>index_top_img_height</code></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3入门</title>
    <url>/2022/01/24/vue3%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Vue3的优势"><a href="#Vue3的优势" class="headerlink" title="Vue3的优势"></a>Vue3的优势</h1><ol>
<li><p>vue3使用了<code>typescript</code>重构了项目，获得了更好的类型支持</p>
</li>
<li><p>重构<code>响应式系统</code>，vue3 使用<code>proxy</code>替换了<code>Object.defineProperty</code>，解决Vue2中存在的问题</p>
<ul>
<li>可直接监听数组类型的变化</li>
<li>更好的性能，监听目标发生变化，不需要像<code>Object.defineProperty</code>一样遍历每一个属性</li>
<li>更强大的拦截功能，拦截器</li>
</ul>
</li>
<li><p>引入了<code>composition API</code>，解决功能、数据、业务逻辑分散的问题。</p>
</li>
<li><p>优化了<code>Virtual DOM</code></p>
<ul>
<li>模板编译时优化，将一些静态节点编译成常量</li>
<li><code>slot</code>优化；将<code>slot</code>编译为<code>lazy</code>函数，将<code>slot</code>的渲染的决定权交给子组件</li>
<li>模板中内联事件的提取并重用（原本每次渲染都重新生成内联函数）</li>
</ul>
</li>
<li><p>更好的<code>Tree shaking</code></p>
<blockquote>
<p>Tree-shaking其实就是把无用的模块进行“剪枝”，很多没有用到的API就不会打包到最后的包里</p>
</blockquote>
</li>
<li><p><code>Teleport </code>任意门</p>
</li>
<li><p><code>Suspense </code> 异步加载动画</p>
</li>
<li><p><code>Fragment </code>片段、允许多个根节点</p>
</li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端RSA+AES混合加密</title>
    <url>/2022/04/19/%E5%89%8D%E7%AB%AFRSA-AES%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="前端RSA-AES混合加密"><a href="#前端RSA-AES混合加密" class="headerlink" title="前端RSA+AES混合加密"></a>前端RSA+AES混合加密</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    最近在工作中使用到了RSA和AES加密，网上也有很多教程，但是没有什么时效性了，所以想把内容记录下来和同学们一起学习交流</p>
<h2 id="一、为什么要使用RSA和AES？"><a href="#一、为什么要使用RSA和AES？" class="headerlink" title="一、为什么要使用RSA和AES？"></a>一、为什么要使用RSA和AES？</h2><ol>
<li><p>RSA和AES是什么？</p>
<ul>
<li><p>RSA：非对称加密，使用<code>公钥</code>和<code>私钥</code>加密和解密，加密速度慢</p>
</li>
<li><p>AES：对称加密，加密和解密使用<code>同一个密钥</code>，加密速度快</p>
</li>
</ul>
</li>
<li><p>为什么要混淆？只用一个不行吗？</p>
<p>因为AES加密速度快，自然是我们的第一选择，但是缺点也明显。因为使用<code>同一个密钥</code>，如果有一方密钥泄露，那么数据也就不安全了。所以我们可以结合RSA互补二者的缺点，使用RSA来加密传递AES密钥，用AES来加密数据。</p>
</li>
</ol>
<h2 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h2><ul>
<li>服务端生成RSA密钥对（<code>privateKey-1</code>、<code>publicKey-1</code>），把<code>公钥 publicKey-1</code>发送给客户端</li>
<li>客户端生成RSA密钥对（<code>privateKey-2</code>、<code>publicKey-2</code>），使用<strong>服务端</strong>的<code>公钥</code>加密自己的 <code>公钥publicKey-2</code> ，将加密后的数据发送给服务端</li>
<li>服务端使用自己的<code>私钥</code>解密获取到<strong>客户端</strong>的公钥，将<code>AESKey</code>使用客户端<code>公钥 publicKey-2</code>加密发送给客户端</li>
<li>客户端使用自己的<code>私钥</code>解密获取<code>AESkey</code></li>
<li>双方使用<code>AESkey</code>来进行数据传输</li>
</ul>
<h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><a href="https://imgtu.com/i/qY5VzD"><img width="100%" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d54a1e9b8e4e188f901451a2ca7a72~tplv-k3u1fbpfcp-zoom-1.image" alt="qY5VzD.png" border="0" /></a></p>
<blockquote>
<p>如果流程从客户端开始，原理也是一样的，只需要把双方角色互换即可</p>
</blockquote>
<h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><p>前端需要用到两个npm包</p>
<ul>
<li><a href="https://github.com/brix/crypto-js">crypto-js</a> 用于操作AES密钥</li>
<li><a href="https://github.com/travist/jsencrypt">JSEncrypt</a> 用于操作RSA密钥，如果加密密文过长可以替换为<a href="https://github.com/lsxlsxxslxsl/encryptlong">encryptlong</a></li>
</ul>
<p>生成RSA密钥</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">&#x27;crypto-js/crypto-js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> JSEncrypt <span class="keyword">from</span> <span class="string">&#x27;jsencrypt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> keyPair = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genKeyPair = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> genKeyPair = &#123;&#125;</span><br><span class="line">    genKeyPair.privateKey = rsaUtil.keyPair.getPrivateKey() <span class="comment">// 生成RSA密钥</span></span><br><span class="line">    genKeyPair.publicKey = rsaUtil.keyPair.getPublicKey() <span class="comment">// 生成RSA公钥</span></span><br><span class="line">    <span class="keyword">return</span> genKeyPair</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RSA公钥加密 - 收到服务端公钥后加密公钥</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rsa公钥加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>cipherContent 需要加密内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>publicKey 服务端的公钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> encryptByRsa = <span class="function">(<span class="params">cipherContent, publicKey</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newValue = <span class="keyword">typeof</span> cipherContent === <span class="string">&#x27;string&#x27;</span> ? cipherContent : cipherContent.toString()</span><br><span class="line">    keyPair.setPublicKey(publicKey)</span><br><span class="line">    <span class="keyword">return</span> keyPair.encryptLong(newValue) <span class="comment">// 注意：加密类型为string</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>RSA解密 - 解密后取到AES key</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rsa私钥解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>plainContent 解密的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>privateKey 解密私钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> decryptByRsa = <span class="function">(<span class="params">plainContent, privateKey</span>) =&gt;</span> &#123;</span><br><span class="line">    keyPair.setPrivateKey(privateKey)</span><br><span class="line">    <span class="keyword">return</span> keyPair.decryptLong(plainContent)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>AES 加密</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AES 加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>cipherContent 加密的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>key AES key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> encrypt = <span class="function">(<span class="params">cipherContent, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> aesKey = CryptoJS.enc.Utf8.parse(key)</span><br><span class="line">	<span class="keyword">const</span> newValue = <span class="keyword">typeof</span> cipherContent === <span class="string">&#x27;string&#x27;</span> ? cipherContent : cipherContent.toString()</span><br><span class="line">    <span class="keyword">const</span> encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(newValue), aesKey, &#123; <span class="attr">mode</span>: CryptoJS.mode.ECB, <span class="attr">padding</span>: CryptoJS.pad.Pkcs7 &#125;)</span><br><span class="line">    <span class="keyword">return</span> encrypted.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AES 解密</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AES解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>plainContent 解密的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>key AES key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">decrypt</span>: <span class="function">(<span class="params">plainContent, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> aesKey = CryptoJS.enc.Utf8.parse(key)</span><br><span class="line">    <span class="keyword">const</span> decrypt = CryptoJS.AES.decrypt(plainContent, aesKey, &#123; <span class="attr">mode</span>: CryptoJS.mode.ECB, <span class="attr">padding</span>: CryptoJS.pad.Pkcs7 &#125;)</span><br><span class="line">    <span class="keyword">const</span> decString = CryptoJS.enc.Utf8.stringify(decrypt).toString()</span><br><span class="line">    <span class="keyword">return</span> decString <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? decString : <span class="built_in">JSON</span>.parse(decString)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="四、Q-amp-A"><a href="#四、Q-amp-A" class="headerlink" title="四、Q&amp;A"></a>四、Q&amp;A</h2><p>剩下几个问题想和大家一起探讨下</p>
<ol>
<li><p>前端加密有意义吗？</p>
<p>我的回答是防君子不防小人，真正的”安全”还是得靠后端的同学</p>
</li>
<li><p>前端怎么安全的存储密钥？</p>
<p>我现在的操作还是二次加密后存储session，不知道同学们是否有更好的方案</p>
</li>
</ol>
]]></content>
  </entry>
</search>
