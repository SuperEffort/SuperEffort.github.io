<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常见的 MOCK 方案</title>
    <url>/2021/09/09/test1/</url>
    <content><![CDATA[<h1 id="常见的-MOCK-方案"><a href="#常见的-MOCK-方案" class="headerlink" title="常见的 MOCK 方案"></a>常见的 MOCK 方案</h1><h3 id="1-代码侵入-直接在代码中写死-Mock-数据，或者请求本地的-JSON-文件"><a href="#1-代码侵入-直接在代码中写死-Mock-数据，或者请求本地的-JSON-文件" class="headerlink" title="1.代码侵入 (直接在代码中写死 Mock 数据，或者请求本地的 JSON 文件)"></a>1.代码侵入 (直接在代码中写死 Mock 数据，或者请求本地的 JSON 文件)</h3><p><strong>优点：</strong> 无</p>
<p><strong>缺点：</strong></p>
<ol>
<li>和其他方案比 Mock 效果不好。</li>
<li>与真实 Server 环境的切换非常麻烦，一切需要侵入代码切换环境的行为都是不好的。</li>
</ol>
<h2 id="2-请求拦截"><a href="#2-请求拦截" class="headerlink" title="2.请求拦截"></a>2.请求拦截</h2><p>代表：<a href="http://mockjs.com/">Mock.js</a></p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Mock.mock(<span class="regexp">/\\/</span>api\\/visitor\\/list/, <span class="string">&#x27;get&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data|10&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;@csentence(5)&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;@integer(6, 9)-@integer(10, 14)岁 @cword(&quot;零有&quot;, 1)基础&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;lesson_image&#x27;</span>: <span class="string">&quot;&lt;https://images.pexels.com/3737094/pexels-photo-3737094.jpeg&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;lesson_package&#x27;</span>: <span class="string">&#x27;L1基础指令课&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;done&#x27;</span>: <span class="string">&#x27;@integer(10000, 99999)&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ol>
<li>与前端代码分离</li>
<li>可生成随机数据</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li><p>数据都是动态生成的假数据，无法真实模拟增删改查的情况。</p>
</li>
<li><p>只支持 ajax，不支持 fetch。</p>
<p><a href="https://zhuanlan.zhihu.com/p/24594294">ajax 和 fetch 区别</a></p>
</li>
</ol>
<h2 id="3-接口管理工具"><a href="#3-接口管理工具" class="headerlink" title="3.接口管理工具"></a>3.接口管理工具</h2><p><strong>代表：</strong> <a href="https://github.com/thx/RAP">rap</a>、<a href="https://swagger.io/">swagger</a>、<a href="https://github.com/dreamhead/moco">moco</a>、<a href="https://github.com/YMFE/yapi">yapi</a></p>
<p><strong>优点：</strong></p>
<ol>
<li>配置功能强大，接口管理与 Mock 一体，后端修改接口 Mock 也跟着更改，可靠。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>配置复杂，依赖后端，可能会出现后端不愿意出手，或者等配置完了，接口也开发出来了的情况。</li>
<li>一般会作为大团队的基础建设而存在</li>
</ol>
<h2 id="4-本地-Node-服务器"><a href="#4-本地-Node-服务器" class="headerlink" title="4.本地 Node 服务器"></a>4.本地 Node 服务器</h2><p><strong>代表：</strong><a href="https://github.com/typicode/json-server">json-server</a></p>
<p><strong>优点：</strong></p>
<ol>
<li>配置简单，json-server 甚至可以 0 代码 30 秒启动一个 REST API Server。</li>
<li>自定义程度高，一切尽在掌控中。</li>
<li>增删改查真实模拟。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>与接口管理工具相比，无法随着后端 API 的修改而自动修改。</li>
</ol>
]]></content>
      <tags>
        <tag>Mock</tag>
      </tags>
  </entry>
</search>
